@charset "UTF-8";
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

header,
footer {
  text-align: center;
  color: #fff;
  background-color: cadetblue;
  height: 80px;
}

/*
	section_name: le podemos definir margenes o espaciados
	cuando queremos separar esta seccion de otra 
*/
.section_name {
  padding: 50px 0;
  /*
  	container_name: es el encargado de manejar el 
  	responsive a travez de la propiedad width
  */
}
.section_name .container_name {
  margin: 0 auto;
  /*
  	@query 899px <== : modificamos el width de
  	container_name para esta medida
  */
  /*
  	@query 900px ==> : modificamos el width de
  	container_name para esta medida
  */
  /*
  	flexbox_name
  */
}
@media (min-width: 899px) {
  .section_name .container_name {
    width: 95%;
  }
}
@media (min-width: 900px) {
  .section_name .container_name {
    width: 80%;
  }
}
.section_name .container_name .flexbox_name {
  /*
  	@query 900px ==> : definimos position: relative para 
  	solucionar el problema que genera definir absolute
  	en un elemento hijo, finalmente implementamos
  	flexbox con su propeidad align-items mas un height
  	que le da altura a la caja permitiendo centrar las
  	cajas verticalmente
  */
  /*
  	box_name_img: es importante definirle a un contenedor
  	la propiedad height si este contiene dentro una tag-img
  	para luego ajustar la imagen al tamaño del contenedor
  */
  /*
  	box_name
  */
}
@media (min-width: 900px) {
  .section_name .container_name .flexbox_name {
    position: relative;
    display: flex;
    height: 400px;
    align-items: center;
  }
}
.section_name .container_name .flexbox_name .box_name_img {
  height: 200px;
  /*
  	@query 600px ==> : cambiamos el height del contenedor
  	box_name_img
  */
  /*
  	@query 900px ==> : definimos position: absolute con sus
  	propiedades right y z-index que nos permiten posicionar 
  	la caja, definir un height y width nos ayuda a sobre
  	poner una caja encima de la otra
  */
  /*
  	tag-img: es importante definir el width y height 
  	de la img a 100% y object-fit: cover para que esta 
  	se ajuste al tamaño de su contenedor
  */
}
@media (min-width: 600px) {
  .section_name .container_name .flexbox_name .box_name_img {
    height: 300px;
  }
}
@media (min-width: 900px) {
  .section_name .container_name .flexbox_name .box_name_img {
    position: absolute;
    right: 0;
    z-index: 19;
    height: 90%;
    width: 60%;
  }
}
.section_name .container_name .flexbox_name .box_name_img img {
  width: 100%;
  height: 100%;
  -o-object-fit: cover;
     object-fit: cover;
}
.section_name .container_name .flexbox_name .box_name {
  background-color: darkcyan;
  /*
  	@query 900px ==> : definimos flexbox y su 
  	propiedad align-items mas un height que nos
  	permite centrar su contenido verticalmente,
  	deifinir un width nos ayuda a sobre poner una caja 
  	encima de la otra 
  */
  /*
  	content_info
  */
}
@media (min-width: 900px) {
  .section_name .container_name .flexbox_name .box_name {
    display: flex;
    width: 60%;
    height: 100%;
    align-items: center;
  }
}
.section_name .container_name .flexbox_name .box_name .content_info {
  text-align: center;
  color: #fff;
  padding: 20px 40px;
  /*
  	@query 900px ==> : este width es importante 
  	definirlo para que content_info se iguale al 
  	tamaño de box_name_img 
  */
}
@media (min-width: 900px) {
  .section_name .container_name .flexbox_name .box_name .content_info {
    width: 67%;
  }
}
.section_name .container_name .flexbox_name .box_name .content_info p {
  letter-spacing: 1.2px;
  line-height: 1.2;
  margin-top: 20px;
}/*# sourceMappingURL=style.css.map */